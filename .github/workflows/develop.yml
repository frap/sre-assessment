name: 'üß¨ Develop Release'

on:
  push:
    branches:
      - 'develop'
      # only run tests when git commit tagged with semantic version
    tags:
      - "*.*.*"
  workflow_call:

concurrency:
  grup: "ci-develop-${{ github.ref }}-1"
  cancel-in-progress: true
  
env:
  FRONTEND_IMAGE: "clearpoint/frontend"
  BACKEND_IMAGE:  "clearpoint/backend"
  
jobs:
  node-build:
    
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'Frontend' # Here the path to the folder where package-lock.json is located.
    steps:
      - name: "‚òÅÔ∏è checkout repository"
        uses: actions/checkout@v3

      - name: "üîß setup node"  
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: "üîß install yarn@latest"
        run: npm install yarn@latest npm@latest

      - name: "üì¶ install dependencies"
        run: npm ci
        with:
          cache: 'npm'
          
      - run: npm run build --if-present

  docker-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          echo ::set-output name=tagged_image::${FRONTEND_IMAGE}:${TAG}
          echo ::set-output name=tag::${TAG}

      - Name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build production image
        uses: docker/build-push-action@v3
        with:
          context:  Frontend/
          #file: Frontend/Dockerfile
          tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha,scope=$FRONTEND_NAME
          cache-to: type=gha,mode=max,scope=$FRONTEND_NAME

  docker-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          echo ::set-output name=tagged_image::${BACKEND_IMAGE}:${TAG}
          echo ::set-output name=tag::${TAG}

      - Name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build production image
        uses: docker/build-push-action@v2
        with:
          context: Backend/Todolist.Api/
          #file: Backend/Todolist.Api/Dockerfile
          tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha,scope=${{ env.BACKEND_NAME }}
          cache-to: type=gha,mode=max,scope=${{ env.BACKEND_NAME }}
          
  test-frontend:
    name: Test Frontend application
    needs: node-build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'Frontend'
    steps:
      - name: "üîç run tests"
        run: npm run test --if-present

  test-fe-cypress:
    needs: node-build  
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'Frontend'

    container: cypress/browsers:node12.13.0-chrome78-ff70
    steps:
      # Install NPM dependencies, cache them correctly
      # and run all Cypress tests
      - name: "üîç Cypress run tests"
        uses: cypress-io/github-action@v4
        with:
          browser: chrome
          install-command: yarn --frozen-lockfile --silent
          config: pageLoadTimeout=10000,baseUrl=http://localhost:3000
          build: yarn run build
          start: yarn run start
          wait-on: 'http://localhost:3000'

      - name: "üîç run tests"
        run: npm run cypress:headless --if-present
        working-directory: Frontend

  test-backend:
    runs-on: ubuntu-latest
 
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core SDK 
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '5.0.x'
        working-directory: Backend/TodoList.Api
      - name: Install dependencies
        run: dotnet restore
        working-directory: Backend/TodoList.Api
      - name: Build dotnet
        run: dotnet build --configuration Release --no-restore
        working-directory: Backend/TodoList.Api
      - name: "üîç  Dotnet Tests"
        run: dotnet test --no-restore --verbosity normal
        working-directory: Backend/TodoList.Api
   
   
